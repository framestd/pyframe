#!usr/bin/env python

import sys
import os
import argparse
import sledge

class Clapi:
    def __init__(self):
        pass
    INIT_HELP = '''creates a new project in the directory
    from where the program is invoked'''
    BUILD_HELP = '''builds the project in the directory passed alongside
    the build command'''
    FRAMERC = """{
        "ignore":[""],
        "filter":["*.frame"],
        "dest": {
            "path": "../build",
            "rel_to_pages_root": true
        }
    }"""
    @staticmethod
    def start():
        parser = argparse.ArgumentParser()
        parser.add_argument('--version', '-v', action='version', version='1.0.0')

        sub_parser = parser.add_subparsers()
        init_parser = sub_parser.add_parser('init', help=Clapi.INIT_HELP)
        init_parser.add_argument('--path')
        init_parser.set_defaults(func=Clapi.initialize)

        build_parser = sub_parser.add_parser('build', help=Clapi.BUILD_HELP)
        build_parser.add_argument('path')
        build_parser.add_argument('--watch', action='store_true')
        build_parser.set_defaults(func=Clapi.build)
        args = parser.parse_args()
        args.func(args)

    @staticmethod
    def build(args):
        workspace = os.path.abspath(args.path)
        if args.watch:
            sledge.hammer(workspace, watch=args.watch)
        else:
            sledge.hammer(workspace)
    
    @staticmethod
    def initialize(args):
        root = 'src'
        dirs = ('src/pages', 'src/layout'
                ,'src/imports', 'src/panes')
        files = ('pages/.framerc', 'pages/index.frame'
                ,'panes/index.yml', 'layout/layout.frame'
                ,'layout/layout.yml')
        try:
            root = os.path.abspath(root)
            if not os.path.exists(root):
                os.mkdir(root)
            else:
                print('[exists]: path "%s" already exists'%root)
                sys.exit(1)
        except:
            print('[failed]: could not create project root "%s"'%root)
            sys.exit(1)
        for each in dirs:
            each = os.path.abspath(each)
            if not os.path.exists(each):
                try:
                    os.mkdir(each)
                except IOError as ex:
                    print('[failed]: could not initialize a new project\n    %s'%(ex.message))
                    sys.exit(1)
            else:
                print('this directory "%s" has an ongoing project'%each)
                sys.exit(1)
        for each in files:
            each = os.path.normpath(
                os.path.join(
                    os.path.abspath('src'), each
                )
            )
            if not os.path.exists(each):
                base = lambda p: os.path.basename(p) 
                with open(each, 'w') as f:
                    if base(each) == base(files[0]):
                        f.write(Clapi.FRAMERC)
                    if base(each) == base(files[1]):
                        f.write('@load: rel-"panes" src-"../%s"\n${message}'%(files[2]))
                    if base(each) == base(files[2]):
                        f.write('message: Hello, buddy!')
                    if base(each) == base(files[3]):
                        f.write('@load: rel-"panes" src-"../%s"'%(files[4]))
                    if base(each) == base(files[4]):
                        f.write('# some variable used in layout.frame')
            else:
                print('this directory has an ongoing project')
                sys.exit(1)
        print('[success]: new project in "%s"'%(os.path.abspath('src')))
        return 0

if __name__ == '__main__':
    Clapi.start()
