@load: rel-"panes" src-"../panes/index.yml"
@load: rel-"dest" href-"../../build"
@load: rel-"layout" src-"../layout/layout.frame"
@load: rel-"specific" find-"getstarted" src-"../panes/specific.yml"
@import: src-"../imports/footer.frame" as-"footer"
@import: src-"../imports/issue.frame" as-"issue"

<div.span9>
  <div.screen>
    <div.intro>
      <h1>Introduction</h1>
      Blink Your Eyes!<br/>
      When I said; &#8220;Build and deploy websites faster than you can blink your eyes&#8221;, I meant it. This site was built even before you could blink your eyes <span.blink></span>.
    </div>
    <div>
      <h2>Let's get you started</h2>
      First things first&mdash;to use sledge you need python on your computer, so if you don't have python, head to the <a.override href="https://www.python.org/downloads/windows" target="_blank">python download page</a> or read this <a.override href="https://docs.python-guide.org/starting/install3/linux/" target="_blank">guide for installing on linux</a>.
      If you have python installed, great, what are we waiting for lets get you started.
      You need to install sledge using this command:
      <code>pip install sledge</code>
      If this command fails, and says something like:
      <pre>
bash: pip: command not found
# on bash
'pip' is not recognized as an internal or external command,
operable program or batch file.
# on windows
      </pre>
      Then you don't have pip in your PATH environment variable. This is what you should do; go to where you have python installed on your file explorer, for example on Windows <code>C:\Python27\</code>, then navigate to the <code>Scripts</code> dir. Now you should see <code>pip.exe</code>, <code>pip&lt;version-major&gt;.exe</code> (where &lt;version-major&gt; is the major version of python).
      Two things you may decide to do:
      <ul>
        <li>Add this directory to your PATH environment variable.</li>
        <li>For Windows Users: Click <code>Shift</code> on the keyboard and right click your mouse on the Scripts dir. You should see "open command window here", go ahead and click it, and now run <code>pip install sledge</code></li>
      </ul>
      <p>
        After installing sledge, in fact, you need to do nothing more, you can start writing your markup script which we call Remarkup and have sledge build them for you.
        Now navigate to you project folder on your command terminal.
        <pre.bash>
cd my/project/folder
python sledge init
        </pre>
        This command initializes a new sledge project which has the following directory tree structure
        <pre>
project/
|__ folder/
    |__ src/
        |__ imports/
        |__ layout/
        |   |__ layout.frame
        |   |__ layout.yml
        |__ pages/
        |   |__ .framerc
        |   |__ index.frame
        |__ panes/
            |__ index.yml
            |__ specific.yml
        </pre>
        The <code>pages</code> folder is where all your webpage should be. They may contain subfolders, and these subfolders can contain <code>.frame</code> files. The <code>pages</code> folder may also contain other files and subfolders that may not be part of your webpage, but you'd want to let sledge know that those files and folders should be ignored.
      </p>
    </div>

    <div>
      <h2>Ignoring directory junks</h2>
      <div.rule//>
      To ignore junk files and folders in your main directory which is the <code>pages</code> dir, a <code>.framerc</code> file will be initialised. This file must be a <code>json</code> file. Here is an example:
      <pre.code-json>
{
  "ignore": ["junks", "junk2", "example.frame", "users/settings.frame"],
  "filter": [".frame"]
}
      </pre>
      <p>Every one of the paths specified in your ignore must be relative to the root, which is the pages directory, and <strong>glob patterns are not supported yet</strong>.
      By default, if your root dir doesn't contain a <code>.framerc</code> file, an abstract one is created and the default value is <code>"ignore": []</code>.</p>
      <p>The fiter property also helps ignore junks, that is, if you had other files with extensions say <code>.xml</code>, you could ignore this file by using a filter, adding only the extensions of the files you want to build to this filter. The filter by default is as written above.</p>
    </div>

    <div>
      <h2>Sledge in details.</h2>
      <div.rule//>
      Ok. We've spoken about sledge and I know you have a vague idea of what sledge is about. The only thing you can think of is that I said &#8220;Build and deploy websites faster than you can blink your eyes&#8221;, but how?
      
      <p>
        Sledge uses a tool of standard and specifications known as <a.override href="framestd.github.io/remarkup">Remarkup</a> which you can also say, a markup script as I mentioned earlier.
      </p>

      <h3#sec:what-is-remarkup>What is Remarkup
        <a.override.section href="#sec:what-is-remarkup">
          <span.icon>${icons::link}</span>
        </a>
      </h3>
      Remarkup is a markup script used for building markups from zero level i.e <code>&lt;!DOCTYPE html&gt;</code> to grand level i.e <code>&lt;/html&gt;</code>. Remarkup is a tool that provides an interface which exposes you to a fast way to build and deploy your webpages. Remarkup specifications "cuts to the chase", no stress at all for developers. Why waste time writing markup when you still have some javascript and backend to take care of?.

      <p>
        With Remarkup, you can split your markup into tiny fractions that looks simple and comprehensible to you intead of writing heavy markups that you get tired of. It is a common thing among web developers to stop their project half way, just because the markup has got complex and now they are fed up, everthing looks ugly. But now with the model Remarkup proposes, which is not a new model in entirety but may be new to the web. &#8220;Hmmm...what could this model be? Intrigue me&#8221;.

        <h3>Lock &amp; Key Model</h3>
        <div.rule//>
        Remarkup proposes a model which serves better, the lock and key model! This is the best model for writing your markup. A model with which you can split your markup into manageable bits, and even, markups can behave as modules.
        
        <h3#sec:what-is-a-frame>Frame&mdash;The lock
          <a.override.section href="#sec:what-is-a-frame">
            <span.icon>${icons::link}</span>
          </a>
        </h3>
        Frame is the lock here. A frame is the part of your markup that is unlikely to change over time. It can be static yet portable. A frame does not necessarily have to be static, it can be made dynamic by giving it a key which fits perfectly into the frame. Let me get ahead of myself here: This part of dynamics in a frame which gives fluidity&mdash;the key&mdash;is called a <strong>Pane</strong>. Think of it as a frame metaphorically, as in the real sense; a frame is a part of something bigger waiting for the other part, say, a <strong>pane</strong>l, to be fixed into it so it can be whole. <em>I hope I hit it here.</em>

        <h3#sec:what-is-a-pane>Pane&mdash;The key
          <a.override.section href="#sec:what-is-a-pane">
            <span.icon>${icons::link}</span>
          </a>
        </h3>

        A pane as said earlier is the part of remarkup that adds fluidity to your frame. Without panes, your frame would be completely static, but panes can alter, modify and make your frame lit. Consider panes as where you store variables. So instead of searching for a specific text or a part in your markup, and then things can get messy for you, no, you just have to go to your pane and change whatever thing. Changing anything in your pane causes a change in every one of your frame files that links to that pane. Panes are YAML source files, so you need to have basic knowledge of yaml.
      </p>
    </div>
    <div>
      ${issue}
    </div>
  </div>

  ${footer}
</div>